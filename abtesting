{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project Instructions\n",
    "### Experiment Overview: Free Trial Screener\n",
    "At the time of this experiment, Udacity courses currently have two options on the course overview page: \"start free trial\", and \"access course materials\". If the student clicks \"start free trial\", they will be asked to enter their credit card information, and then they will be enrolled in a free trial for the paid version of the course. After 14 days, they will automatically be charged unless they cancel first. If the student clicks \"access course materials\", they will be able to view the videos and take the quizzes for free, but they will not receive coaching support or a verified certificate, and they will not submit their final project for feedback.\n",
    "\n",
    "\n",
    "In the experiment, Udacity tested a change where if the student clicked \"start free trial\", they were asked how much time they had available to devote to the course. If the student indicated 5 or more hours per week, they would be taken through the checkout process as usual. If they indicated fewer than 5 hours per week, a message would appear indicating that Udacity courses usually require a greater time commitment for successful completion, and suggesting that the student might like to access the course materials for free. At this point, the student would have the option to continue enrolling in the free trial, or access the course materials for free instead. [This screenshot](https://drive.google.com/file/d/0ByAfiG8HpNUMakVrS0s4cGN2TjQ/view?resourcekey=0-6_dPu8BRM1XlRgV51nIbtA) shows what the experiment looks like.\n",
    "\n",
    "\n",
    "The hypothesis was that this might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn't have enough timeâ€”without significantly reducing the number of students to continue past the free trial and eventually complete the course. If this hypothesis held true, Udacity could improve the overall student experience and improve coaches' capacity to support students who are likely to complete the course.\n",
    "\n",
    "\n",
    "The unit of diversion is a cookie, although if the student enrolls in the free trial, they are tracked by user-id from that point forward. The same user-id cannot enroll in the free trial twice. For users that do not enroll, their user-id is not tracked in the experiment, even if they were signed in when they visited the course overview page.\n",
    "\n",
    "### Metric Choice\n",
    "Which of the following metrics would you choose to measure for this experiment and why? For each metric you choose, indicate whether you would use it as an invariant metric or an evaluation metric. The practical significance boundary for each metric, that is, the difference that would have to be observed before that was a meaningful change for the business, is given in parentheses. All practical significance boundaries are given as absolute changes.\n",
    "\n",
    "\n",
    "Any place \"unique cookies\" are mentioned, the uniqueness is determined by day. (That is, the same cookie visiting on different days would be counted twice.) User-ids are automatically unique since the site does not allow the same user-id to enroll twice.\n",
    "\n",
    "\n",
    "- `Number of cookies`: That is, number of unique cookies to view the course overview page. (dmin=3000)\n",
    "- `Number of user-ids`: That is, number of users who enroll in the free trial. (dmin=50)\n",
    "- `Number of clicks`: That is, number of unique cookies to click the \"Start free trial\" button (which happens before the free trial screener is trigger). (dmin=240)\n",
    "- `Click-through-probability`: That is, number of unique cookies to click the \"Start free trial\" button divided by number of unique cookies to view the course overview page. (dmin=0.01)\n",
    "- `Gross conversion`: That is, number of user-ids to complete checkout and enroll in the free trial divided by number of unique cookies to click the \"Start free trial\" button. (dmin= 0.01)\n",
    "- `Retention`: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by number of user-ids to complete checkout. (dmin=0.01)\n",
    "- `Net conversion`: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by the number of unique cookies to click the \"Start free trial\" button. (dmin= 0.0075)\n",
    "\n",
    "You should also decide now what results you will be looking for in order to launch the experiment. Would a change in any one of your evaluation metrics be sufficient? Would you want to see multiple metrics all move or not move at the same time in order to launch? This decision will inform your choices while designing the experiment.\n",
    "\n",
    "\n",
    "### Measuring Variability\n",
    "[This spreadsheet](https://docs.google.com/spreadsheets/d/1MYNUtC47Pg8hdoCjOXaHqF-thheGpUshrFA21BAJnNc/edit#gid=0) contains rough estimates of the baseline values for these metrics (again, these numbers have been changed from Udacity's true numbers).\n",
    "\n",
    "\n",
    "For each metric you selected as an evaluation metric, estimate its standard deviation analytically. Do you expect the analytic estimates to be accurate? That is, for which metrics, if any, would you want to collect an empirical estimate of the variability if you had time?\n",
    "\n",
    "\n",
    "### Sizing\n",
    "##### Choosing Number of Samples given Power\n",
    "Using the analytic estimates of variance, how many pageviews total (across both groups) would you need to collect to adequately power the experiment? Use an alpha of 0.05 and a beta of 0.2. Make sure you have enough power for each metric.\n",
    "\n",
    "\n",
    "##### Choosing Duration vs. Exposure\n",
    "What percentage of Udacity's traffic would you divert to this experiment (assuming there were no other experiments you wanted to run simultaneously)? Is the change risky enough that you wouldn't want to run on all traffic?\n",
    "\n",
    "\n",
    "Given the percentage you chose, how long would the experiment take to run, using the analytic estimates of variance? If the answer is longer than a few weeks, then this is unreasonably long, and you should reconsider an earlier decision.\n",
    "\n",
    "\n",
    "### Analysis\n",
    "The data for you to analyze is [here](https://docs.google.com/spreadsheets/d/1Mu5u9GrybDdska-ljPXyBjTpdZIUev_6i7t4LRDfXM8/edit#gid=0). This data contains the raw information needed to compute the above metrics, broken down day by day. Note that there are two sheets within the spreadsheet - one for the experiment group, and one for the control group.\n",
    "\n",
    "\n",
    "The meaning of each column is:\n",
    "\n",
    "- `Pageviews`: Number of unique cookies to view the course overview page that day.\n",
    "- `Clicks`: Number of unique cookies to click the course overview page that day.\n",
    "- `Enrollments`: Number of user-ids to enroll in the free trial that day.\n",
    "- `Payments`: Number of user-ids who who enrolled on that day to remain enrolled for 14 days and thus make a payment. (Note that the date for this column is the start date, that is, the date of enrollment, rather than the date of the payment. The payment happened 14 days later. Because of this, the enrollments and payments are tracked for 14 fewer days than the other columns.)\n",
    "\n",
    "\n",
    "### Sanity Checks\n",
    "Start by checking whether your invariant metrics are equivalent between the two groups. If the invariant metric is a simple count that should be randomly split between the 2 groups, you can use a binomial test as demonstrated in Lesson 5. Otherwise, you will need to construct a confidence interval for a difference in proportions using a similar strategy as in Lesson 1, then check whether the difference between group values falls within that confidence level.\n",
    "\n",
    "\n",
    "If your sanity checks fail, look at the day by day data and see if you can offer any insight into what is causing the problem.\n",
    "\n",
    "\n",
    "### Check for Practical and Statistical Significance\n",
    "Next, for your evaluation metrics, calculate a confidence interval for the difference between the experiment and control groups, and check whether each metric is statistically and/or practically significance. A metric is statistically significant if the confidence interval does not include 0 (that is, you can be confident there was a change), and it is practically significant if the confidence interval does not include the practical significance boundary (that is, you can be confident there is a change that matters to the business.)\n",
    "\n",
    "\n",
    "If you have chosen multiple evaluation metrics, you will need to decide whether to use the Bonferroni correction. When deciding, keep in mind the results you are looking for in order to launch the experiment. Will the fact that you have multiple metrics make those results more likely to occur by chance than the alpha level of 0.05?\n",
    "\n",
    "\n",
    "### Run Sign Tests\n",
    "For each evaluation metric, do a sign test using the day-by-day breakdown. If the sign test does not agree with the confidence interval for the difference, see if you can figure out why.\n",
    "\n",
    "\n",
    "### Make a Recommendation\n",
    "Finally, make a recommendation. Would you launch this experiment, not launch it, dig deeper, run a follow-up experiment, or is it a judgment call? If you would dig deeper, explain what area you would investigate. If you would run follow-up experiments, briefIy describe that experiment. If it is a judgment call, explain what factors would be relevant to the decision.\n",
    "\n",
    "\n",
    "### Follow-Up Experiment: How to Reduce Early Cancellations\n",
    "If you wanted to reduce the number of frustrated students who cancel early in the course, what experiment would you try? Give a brief description of the change you would make, what your hypothesis would be about the effect of the change, what metrics you would want to measure, and what unit of diversion you would use. Include an explanation of each of your choices."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis begins from here:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Choosing Invariants\n",
    "\n",
    "##### `Hypothesis`:  The change might set clearer expectations for students upfront, thus reducing the number of frustrated students who left the free trial because they didn't have enough timeâ€”without significantly reducing the number of students to continue past the free trial and eventually complete the course\n",
    "\n",
    "- `Number of cookies`: (That is, number of unique cookies to view the course overview page.) **This is an `invariant` as number of cookies t view course page on a day to day basis shouldn't change.**\n",
    "- `Number of user-ids`: That is, number of users who enroll in the free trial. (dmin=50). **This metric is dependent on what % of cookies are diverted into either control or treatment. So its `not a good representative for the evaluation metric` as more users in a group can indicate high impact, which is not the case in general. This metric is gameable.**  \n",
    "- `Number of clicks`: That is, number of unique cookies to click the \"Start free trial\" button (which happens before the free trial screener is trigger). **This is an `invariant` as number of cookies to view click the start free trial button action happens before the users can see the change. So on a day to day basis this shouldn't change.**\n",
    "- `Click-through-probability`: That is, number of unique cookies to click the \"Start free trial\" button divided by number of unique cookies to view the course overview page. (dmin=0.01). **This `can't be an evaluation metric` as this action happens further up in the funnel and it doesn't provide the relevant information for testing the hypothesis.** \n",
    "- `Gross conversion`: That is, number of user-ids to complete checkout and enroll in the free trial divided by number of unique cookies to click the \"Start free trial\" button. (dmin= 0.01). **This is `an evaluation metric` as this metric is directly relates to hypothesis being tested.**\n",
    "- `Retention`: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by number of user-ids to complete checkout. (dmin=0.01). **This metric doesn't directly measure the change. So it `can't be an evaluation metric`.** \n",
    "- `Net conversion`: That is, number of user-ids to remain enrolled past the 14-day boundary (and thus make at least one payment) divided by the number of unique cookies to click the \"Start free trial\" button. (dmin= 0.0075). **This is `an evaluation metric` as this metric is directly relates to hypothesis being tested.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Measuring Variability\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#conda install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import math\n",
    "from scipy import stats\n",
    "\n",
    "pd.options.display.max_rows = 999\n",
    "\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_pageviews=40000\n",
    "n_clicks=3200\n",
    "n_enroll=660\n",
    "ctp=0.08\n",
    "n_sample=5000\n",
    "\n",
    "click_through_probability=0.08 #clicks / pageviews\n",
    "gross_conversion=0.20625 # enroll / click\n",
    "retention=0.53 # payment / enroll\n",
    "net_conversion=0.1093125 # payment / click"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SD of GC:  0.0202\n",
      "SD of NC:  0.0156\n"
     ]
    }
   ],
   "source": [
    "\"\"\"analytic standard deviation estimate\"\"\"\n",
    "# gross_conversion\n",
    "std_gross_conversion=math.sqrt(gross_conversion*(1-gross_conversion)/(n_clicks/n_pageviews*n_sample))\n",
    "# net_conversion\n",
    "std_net_conversion=math.sqrt(net_conversion*(1-net_conversion)/(n_clicks/n_pageviews*n_sample))\n",
    "print(\"SD of GC: \",round(std_gross_conversion,4))\n",
    "print(\"SD of NC: \",round(std_net_conversion,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sizing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Strategy: For a bunch of Ns, compute the z_star by achieving desired alpha, then\n",
    "## compute what beta would be for that N using the acquired z_star. \n",
    "## Pick the smallest N at which beta crosses the desired value\n",
    "\n",
    "# Inputs:\n",
    "# The desired alpha for a two-tailed test\n",
    "# Returns: The z-critical value\n",
    "def get_z_star(alpha):\n",
    "    return stats.norm.ppf(1.0 - (alpha/2))\n",
    "\n",
    "# Inputs:\n",
    "# z-star: The z-critical value\n",
    "# s: The standard error of the metric at N=1\n",
    "# d_min: The practical significance level\n",
    "# N: The sample size of each group of the experiment\n",
    "# Returns: The beta value of the two-tailed test\n",
    "def get_beta(z_star, s, d_min, N):\n",
    "    SE = s/ math.sqrt(N)\n",
    "    return stats.norm.cdf(z_star*SE,d_min,SE)\n",
    "    \n",
    "# Inputs:\n",
    "# s: The standard error of the metric with N=1 in each group\n",
    "# d_min: The practical significance level\n",
    "# Ns: The sample sizes to try\n",
    "# alpha: The desired alpha level of the test\n",
    "# beta: The desired beta level of the test\n",
    "# Returns: The smallest N out of the given Ns that will achieve the desired\n",
    "#          beta. There should be at least N samples in each group of the experiment.\n",
    "#          If none of the given Ns will work, returns -1. N is the number of\n",
    "#          samples in each group.\n",
    "\n",
    "def required_size(s, d_min, Ns = range(1,20000), alpha = 0.05, beta = 0.2):\n",
    "    for n in Ns:\n",
    "        if (get_beta(get_z_star(alpha), s, d_min, n) <= beta):\n",
    "            return n\n",
    "    return -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The min number of clicks needed for gross_conversion per group: 12850\n",
      "The min number of pageviews needed for gross_conversion per group: 160625\n"
     ]
    }
   ],
   "source": [
    "# s is the pooled standard error for N=1 in each group,\n",
    "\"\"\"number of clicks needed for gross_conversion\"\"\"\n",
    "n=1\n",
    "s=math.sqrt(gross_conversion*(1-gross_conversion)/n)\n",
    "d_min=0.01\n",
    "req=required_size(s,d_min)\n",
    "print(\"The min number of clicks needed for gross_conversion per group: {}\".format(int(req)))\n",
    "print(\"The min number of pageviews needed for gross_conversion per group: {}\".format(int(req/click_through_probability)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The min number of clicks needed for net_conversion per group: 13586\n",
      "The min number of pageviews needed for net_conversion per group: 169825\n"
     ]
    }
   ],
   "source": [
    "# s is the pooled standard error for N=1 in each group,\n",
    "\"\"\"number of clicks needed for gross_conversion\"\"\"\n",
    "n=1\n",
    "s=math.sqrt(net_conversion*(1-net_conversion)/n)\n",
    "d_min=0.0075\n",
    "req=required_size(s,d_min)\n",
    "print(\"The min number of clicks needed for net_conversion per group: {}\".format(int(req)))\n",
    "print(\"The min number of pageviews needed for net_conversion per group: {}\".format(int(req/click_through_probability)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Using the online AB testing calculator [here](https://www.evanmiller.org/ab-testing/sample-size.html),**\n",
    "\n",
    "- Samplesize of pageviews for `gross_conversion`  = 685,325\n",
    "- Samplesize of pageviews for `net_conversion` = 645,876\n",
    "\n",
    "As, the max samplesize between the both metrics is `685,325` , we'll go ahead with that samplesize.\n",
    "\n",
    "The `duration` we need to run the test is ~`18 days` considering diverting `100% traffic` with `40,000 cookies per day`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Importing dataset\n",
    "ex_df = pd.read_csv(\"C:/Users/skrishna/OneDrive - Activision Publishing/Desktop/SpaceX/Project X/AB Testing Udacity/udacity_abtest.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variant</th>\n",
       "      <th>Date</th>\n",
       "      <th>Pageviews</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Enrollments</th>\n",
       "      <th>Payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0</td>\n",
       "      <td>105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Variant         Date  Pageviews  Clicks  Enrollments  Payments\n",
       "0  control  Sat, Oct 11       7723     687        134.0      70.0\n",
       "1  control  Sun, Oct 12       9102     779        147.0      70.0\n",
       "2  control  Mon, Oct 13      10511     909        167.0      95.0\n",
       "3  control  Tue, Oct 14       9871     836        156.0     105.0\n",
       "4  control  Wed, Oct 15      10014     837        163.0      64.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Datacleansing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0</td>\n",
       "      <td>105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   variant         date  pageviews  clicks  enrollments  payments\n",
       "0  control  Sat, Oct 11       7723     687        134.0      70.0\n",
       "1  control  Sun, Oct 12       9102     779        147.0      70.0\n",
       "2  control  Mon, Oct 13      10511     909        167.0      95.0\n",
       "3  control  Tue, Oct 14       9871     836        156.0     105.0\n",
       "4  control  Wed, Oct 15      10014     837        163.0      64.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_df.columns = ex_df.columns.str.lower()\n",
    "ex_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variant</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>control</td>\n",
       "      <td>345543</td>\n",
       "      <td>28378</td>\n",
       "      <td>3785.0</td>\n",
       "      <td>2033.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>experiment</td>\n",
       "      <td>344660</td>\n",
       "      <td>28325</td>\n",
       "      <td>3423.0</td>\n",
       "      <td>1945.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            pageviews  clicks  enrollments  payments\n",
       "variant                                             \n",
       "control        345543   28378       3785.0    2033.0\n",
       "experiment     344660   28325       3423.0    1945.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(ex_df.groupby(['variant']).agg({'pageviews': 'sum'\n",
    "                               ,'clicks': 'sum'\n",
    "                               ,'enrollments': 'sum'\n",
    "                               ,'payments': 'sum'}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "req_df = (ex_df.groupby(['variant']).agg({'pageviews': 'sum'\n",
    "                               ,'clicks': 'sum'\n",
    "                               ,'enrollments': 'sum'\n",
    "                               ,'payments': 'sum'})\n",
    "         .reset_index())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>345543</td>\n",
       "      <td>28378</td>\n",
       "      <td>3785.0</td>\n",
       "      <td>2033.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>experiment</td>\n",
       "      <td>344660</td>\n",
       "      <td>28325</td>\n",
       "      <td>3423.0</td>\n",
       "      <td>1945.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      variant  pageviews  clicks  enrollments  payments\n",
       "0     control     345543   28378       3785.0    2033.0\n",
       "1  experiment     344660   28325       3423.0    1945.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "req_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sanity Checks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>variant</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>control</td>\n",
       "      <td>0.50064</td>\n",
       "      <td>0.500467</td>\n",
       "      <td>0.525111</td>\n",
       "      <td>0.511061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>experiment</td>\n",
       "      <td>0.49936</td>\n",
       "      <td>0.499533</td>\n",
       "      <td>0.474889</td>\n",
       "      <td>0.488939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            pageviews    clicks  enrollments  payments\n",
       "variant                                               \n",
       "control       0.50064  0.500467     0.525111  0.511061\n",
       "experiment    0.49936  0.499533     0.474889  0.488939"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### The perencetage of traffic in each group #### \n",
    "(ex_df.groupby(['variant']).agg({'pageviews': 'sum'\n",
    "                               ,'clicks': 'sum'\n",
    "                               ,'enrollments': 'sum'\n",
    "                               ,'payments': 'sum'})\n",
    "                          .apply(lambda x: x / (x.sum())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 95% CI of the proportions can rage from 0.4988 to 0.5012\n"
     ]
    }
   ],
   "source": [
    "#### Sanity checking for the variant proportions ####\n",
    "\n",
    "SD = math.sqrt((0.5*0.5) / (req_df.pageviews.sum()))\n",
    "MOE = SD * 1.96\n",
    "print(\"The 95% CI of the proportions can rage from {} to {}\".format(round(0.5 - MOE,4), round(0.5 + MOE,4)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 95% CI of the proportions can rage from 0.4959 to 0.5041\n"
     ]
    }
   ],
   "source": [
    "#### Sanity checking for the variant proportions ####\n",
    "\n",
    "SD = math.sqrt((0.5*0.5) / (req_df.clicks.sum()))\n",
    "MOE = SD * 1.96\n",
    "print(\"The 95% CI of the proportions can rage from {} to {}\".format(round(0.5 - MOE,4), round(0.5 + MOE,4)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis of the Evaluation Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "####Removing the rows where gross_conversion and net_conversion are null values###\n",
    "eval_df = (ex_df.dropna()\n",
    "                .groupby(['variant']).agg({'pageviews': 'sum'\n",
    "                               ,'clicks': 'sum'\n",
    "                               ,'enrollments': 'sum'\n",
    "                               ,'payments': 'sum'})\n",
    "                .reset_index())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>212163</td>\n",
       "      <td>17293</td>\n",
       "      <td>3785.0</td>\n",
       "      <td>2033.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>experiment</td>\n",
       "      <td>211362</td>\n",
       "      <td>17260</td>\n",
       "      <td>3423.0</td>\n",
       "      <td>1945.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      variant  pageviews  clicks  enrollments  payments\n",
       "0     control     212163   17293       3785.0    2033.0\n",
       "1  experiment     211362   17260       3423.0    1945.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eval_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "eval_df[['enrollments', 'payments']] = eval_df[['enrollments', 'payments']].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 5 columns):\n",
      "variant        2 non-null object\n",
      "pageviews      2 non-null int64\n",
      "clicks         2 non-null int64\n",
      "enrollments    2 non-null int32\n",
      "payments       2 non-null int32\n",
      "dtypes: int32(2), int64(2), object(1)\n",
      "memory usage: 192.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "eval_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prop_test(df, alpha = 0.05, dmin = 0.01, num = None, denom = None):\n",
    "    pd.options.display.float_format = '{:,.4f}'.format\n",
    "    for i in range(len(req_df)):\n",
    "        if df.loc[i, 'variant'] == 'control':\n",
    "            n1 = df.loc[i, denom]\n",
    "            x1 = df.loc[i, num]\n",
    "            p1 = x1/n1\n",
    "        elif df.loc[i, 'variant'] == 'experiment':\n",
    "            n2 = df.loc[i, denom]\n",
    "            x2 = df.loc[i, num]\n",
    "            p2 = x2/n2\n",
    "    \n",
    "    p_pool = ((n1*p1) + (n2*p2))/(n1+n2)\n",
    "    se = np.sqrt(p_pool*(1-p_pool)*((1/n1) + (1/n2)))\n",
    "    z = (p2 - p1)/se\n",
    "    cv = stats.norm.ppf(1.0 - (alpha/2))\n",
    "    p = stats.norm.sf(abs(z))*2\n",
    "    diff = p2 - p1\n",
    "    me = cv*se\n",
    "    me_pct = me/p1\n",
    "    lower_bound = diff - (cv*se)\n",
    "    upper_bound = diff + (cv*se)\n",
    "    diff_pct = diff/p1\n",
    "    lb_pct = lower_bound/p1\n",
    "    ub_pct = upper_bound/p1\n",
    "    if lower_bound > dmin or upper_bound < -dmin:\n",
    "        print('The change is practically signifiant')\n",
    "    else:\n",
    "        print('The change is not practically signifiant')\n",
    "    \n",
    "    if p <= 0.05:\n",
    "        print('The change is statistically signifiant')\n",
    "    else:\n",
    "        print('The change is not statistically signifiant')\n",
    "    return {'p_value': p, 'z': z, 'lower_bound': lower_bound, 'upper_bound': upper_bound, 'change_from_control': diff}\n",
    "    #return n1,x1,n2,x2\n",
    "    #return p1, p2, diff, cv, p_pool, se, me, lower_bound, upper_bound\n",
    "    #return p1, p2, p_pool, se, me"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The change is practically signifiant\n",
      "The change is statistically signifiant\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'p_value': 2.578401033720593e-06,\n",
       " 'z': -4.701830023753982,\n",
       " 'lower_bound': -0.02912320088750467,\n",
       " 'upper_bound': -0.011986548273218463,\n",
       " 'change_from_control': -0.020554874580361565}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# gross conversion evaluation\n",
    "prop_test(eval_df, num = 'enrollments', denom = 'clicks')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The change is not practically signifiant\n",
      "The change is not statistically signifiant\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'p_value': 0.15584068262150205,\n",
       " 'z': -1.4192001144365733,\n",
       " 'lower_bound': -0.011604500677993734,\n",
       " 'upper_bound': 0.0018570553289053993,\n",
       " 'change_from_control': -0.0048737226745441675}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# net conversion evaluation\n",
    "prop_test(eval_df, num = 'payments', denom = 'clicks')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sign Test to cross verify the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0000</td>\n",
       "      <td>95.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>105.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0000</td>\n",
       "      <td>64.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   variant         date  pageviews  clicks  enrollments  payments\n",
       "0  control  Sat, Oct 11       7723     687     134.0000   70.0000\n",
       "1  control  Sun, Oct 12       9102     779     147.0000   70.0000\n",
       "2  control  Mon, Oct 13      10511     909     167.0000   95.0000\n",
       "3  control  Tue, Oct 14       9871     836     156.0000  105.0000\n",
       "4  control  Wed, Oct 15      10014     837     163.0000   64.0000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "control_df = ex_df.loc[ex_df['variant'] == 'control', :].dropna()\n",
    "experiment_df = ex_df.loc[ex_df['variant'] == 'experiment', :].dropna().reset_index(drop = True)\n",
    "experiment_df = experiment_df.add_suffix('_ex')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   variant         date  pageviews  clicks  enrollments  payments\n",
      "0  control  Sat, Oct 11       7723     687     134.0000   70.0000\n",
      "1  control  Sun, Oct 12       9102     779     147.0000   70.0000\n",
      "2  control  Mon, Oct 13      10511     909     167.0000   95.0000\n",
      "3  control  Tue, Oct 14       9871     836     156.0000  105.0000\n",
      "4  control  Wed, Oct 15      10014     837     163.0000   64.0000\n",
      "   variant_ex      date_ex  pageviews_ex  clicks_ex  enrollments_ex  \\\n",
      "0  experiment  Sat, Oct 11          7716        686        105.0000   \n",
      "1  experiment  Sun, Oct 12          9288        785        116.0000   \n",
      "2  experiment  Mon, Oct 13         10480        884        145.0000   \n",
      "3  experiment  Tue, Oct 14          9867        827        138.0000   \n",
      "4  experiment  Wed, Oct 15          9793        832        140.0000   \n",
      "\n",
      "   payments_ex  \n",
      "0      34.0000  \n",
      "1      91.0000  \n",
      "2      79.0000  \n",
      "3      92.0000  \n",
      "4      94.0000  \n"
     ]
    }
   ],
   "source": [
    "print(control_df.head())\n",
    "print(experiment_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "      <th>variant_ex</th>\n",
       "      <th>date_ex</th>\n",
       "      <th>pageviews_ex</th>\n",
       "      <th>clicks_ex</th>\n",
       "      <th>enrollments_ex</th>\n",
       "      <th>payments_ex</th>\n",
       "      <th>gc</th>\n",
       "      <th>nc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0000</td>\n",
       "      <td>70.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7716</td>\n",
       "      <td>686</td>\n",
       "      <td>105.0000</td>\n",
       "      <td>34.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0000</td>\n",
       "      <td>70.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9288</td>\n",
       "      <td>785</td>\n",
       "      <td>116.0000</td>\n",
       "      <td>91.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0000</td>\n",
       "      <td>95.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10480</td>\n",
       "      <td>884</td>\n",
       "      <td>145.0000</td>\n",
       "      <td>79.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>105.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9867</td>\n",
       "      <td>827</td>\n",
       "      <td>138.0000</td>\n",
       "      <td>92.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0000</td>\n",
       "      <td>64.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>9793</td>\n",
       "      <td>832</td>\n",
       "      <td>140.0000</td>\n",
       "      <td>94.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 16</td>\n",
       "      <td>9670</td>\n",
       "      <td>823</td>\n",
       "      <td>138.0000</td>\n",
       "      <td>82.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 16</td>\n",
       "      <td>9500</td>\n",
       "      <td>788</td>\n",
       "      <td>129.0000</td>\n",
       "      <td>61.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 17</td>\n",
       "      <td>9008</td>\n",
       "      <td>748</td>\n",
       "      <td>146.0000</td>\n",
       "      <td>76.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 17</td>\n",
       "      <td>9088</td>\n",
       "      <td>780</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>44.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 18</td>\n",
       "      <td>7434</td>\n",
       "      <td>632</td>\n",
       "      <td>110.0000</td>\n",
       "      <td>70.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 18</td>\n",
       "      <td>7664</td>\n",
       "      <td>652</td>\n",
       "      <td>94.0000</td>\n",
       "      <td>62.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 19</td>\n",
       "      <td>8459</td>\n",
       "      <td>691</td>\n",
       "      <td>131.0000</td>\n",
       "      <td>60.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 19</td>\n",
       "      <td>8434</td>\n",
       "      <td>697</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>77.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 20</td>\n",
       "      <td>10667</td>\n",
       "      <td>861</td>\n",
       "      <td>165.0000</td>\n",
       "      <td>97.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 20</td>\n",
       "      <td>10496</td>\n",
       "      <td>860</td>\n",
       "      <td>153.0000</td>\n",
       "      <td>98.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 21</td>\n",
       "      <td>10660</td>\n",
       "      <td>867</td>\n",
       "      <td>196.0000</td>\n",
       "      <td>105.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 21</td>\n",
       "      <td>10551</td>\n",
       "      <td>864</td>\n",
       "      <td>143.0000</td>\n",
       "      <td>71.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 22</td>\n",
       "      <td>9947</td>\n",
       "      <td>838</td>\n",
       "      <td>162.0000</td>\n",
       "      <td>92.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 22</td>\n",
       "      <td>9737</td>\n",
       "      <td>801</td>\n",
       "      <td>128.0000</td>\n",
       "      <td>70.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 23</td>\n",
       "      <td>8324</td>\n",
       "      <td>665</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>56.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 23</td>\n",
       "      <td>8176</td>\n",
       "      <td>642</td>\n",
       "      <td>122.0000</td>\n",
       "      <td>68.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 24</td>\n",
       "      <td>9434</td>\n",
       "      <td>673</td>\n",
       "      <td>220.0000</td>\n",
       "      <td>122.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 24</td>\n",
       "      <td>9402</td>\n",
       "      <td>697</td>\n",
       "      <td>194.0000</td>\n",
       "      <td>94.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 25</td>\n",
       "      <td>8687</td>\n",
       "      <td>691</td>\n",
       "      <td>176.0000</td>\n",
       "      <td>128.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 25</td>\n",
       "      <td>8669</td>\n",
       "      <td>669</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>81.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 26</td>\n",
       "      <td>8896</td>\n",
       "      <td>708</td>\n",
       "      <td>161.0000</td>\n",
       "      <td>104.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 26</td>\n",
       "      <td>8881</td>\n",
       "      <td>693</td>\n",
       "      <td>153.0000</td>\n",
       "      <td>101.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 27</td>\n",
       "      <td>9535</td>\n",
       "      <td>759</td>\n",
       "      <td>233.0000</td>\n",
       "      <td>124.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 27</td>\n",
       "      <td>9655</td>\n",
       "      <td>771</td>\n",
       "      <td>213.0000</td>\n",
       "      <td>119.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 28</td>\n",
       "      <td>9363</td>\n",
       "      <td>736</td>\n",
       "      <td>154.0000</td>\n",
       "      <td>91.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 28</td>\n",
       "      <td>9396</td>\n",
       "      <td>736</td>\n",
       "      <td>162.0000</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 29</td>\n",
       "      <td>9327</td>\n",
       "      <td>739</td>\n",
       "      <td>196.0000</td>\n",
       "      <td>86.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 29</td>\n",
       "      <td>9262</td>\n",
       "      <td>727</td>\n",
       "      <td>201.0000</td>\n",
       "      <td>96.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 30</td>\n",
       "      <td>9345</td>\n",
       "      <td>734</td>\n",
       "      <td>167.0000</td>\n",
       "      <td>75.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 30</td>\n",
       "      <td>9308</td>\n",
       "      <td>728</td>\n",
       "      <td>207.0000</td>\n",
       "      <td>67.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 31</td>\n",
       "      <td>8890</td>\n",
       "      <td>706</td>\n",
       "      <td>174.0000</td>\n",
       "      <td>101.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 31</td>\n",
       "      <td>8715</td>\n",
       "      <td>722</td>\n",
       "      <td>182.0000</td>\n",
       "      <td>123.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Nov 1</td>\n",
       "      <td>8460</td>\n",
       "      <td>681</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>93.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Nov 1</td>\n",
       "      <td>8448</td>\n",
       "      <td>695</td>\n",
       "      <td>142.0000</td>\n",
       "      <td>100.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Nov 2</td>\n",
       "      <td>8836</td>\n",
       "      <td>693</td>\n",
       "      <td>206.0000</td>\n",
       "      <td>67.0000</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Nov 2</td>\n",
       "      <td>8836</td>\n",
       "      <td>724</td>\n",
       "      <td>182.0000</td>\n",
       "      <td>103.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    variant         date  pageviews  clicks  enrollments  payments  \\\n",
       "0   control  Sat, Oct 11       7723     687     134.0000   70.0000   \n",
       "1   control  Sun, Oct 12       9102     779     147.0000   70.0000   \n",
       "2   control  Mon, Oct 13      10511     909     167.0000   95.0000   \n",
       "3   control  Tue, Oct 14       9871     836     156.0000  105.0000   \n",
       "4   control  Wed, Oct 15      10014     837     163.0000   64.0000   \n",
       "5   control  Thu, Oct 16       9670     823     138.0000   82.0000   \n",
       "6   control  Fri, Oct 17       9008     748     146.0000   76.0000   \n",
       "7   control  Sat, Oct 18       7434     632     110.0000   70.0000   \n",
       "8   control  Sun, Oct 19       8459     691     131.0000   60.0000   \n",
       "9   control  Mon, Oct 20      10667     861     165.0000   97.0000   \n",
       "10  control  Tue, Oct 21      10660     867     196.0000  105.0000   \n",
       "11  control  Wed, Oct 22       9947     838     162.0000   92.0000   \n",
       "12  control  Thu, Oct 23       8324     665     127.0000   56.0000   \n",
       "13  control  Fri, Oct 24       9434     673     220.0000  122.0000   \n",
       "14  control  Sat, Oct 25       8687     691     176.0000  128.0000   \n",
       "15  control  Sun, Oct 26       8896     708     161.0000  104.0000   \n",
       "16  control  Mon, Oct 27       9535     759     233.0000  124.0000   \n",
       "17  control  Tue, Oct 28       9363     736     154.0000   91.0000   \n",
       "18  control  Wed, Oct 29       9327     739     196.0000   86.0000   \n",
       "19  control  Thu, Oct 30       9345     734     167.0000   75.0000   \n",
       "20  control  Fri, Oct 31       8890     706     174.0000  101.0000   \n",
       "21  control   Sat, Nov 1       8460     681     156.0000   93.0000   \n",
       "22  control   Sun, Nov 2       8836     693     206.0000   67.0000   \n",
       "\n",
       "    variant_ex      date_ex  pageviews_ex  clicks_ex  enrollments_ex  \\\n",
       "0   experiment  Sat, Oct 11          7716        686        105.0000   \n",
       "1   experiment  Sun, Oct 12          9288        785        116.0000   \n",
       "2   experiment  Mon, Oct 13         10480        884        145.0000   \n",
       "3   experiment  Tue, Oct 14          9867        827        138.0000   \n",
       "4   experiment  Wed, Oct 15          9793        832        140.0000   \n",
       "5   experiment  Thu, Oct 16          9500        788        129.0000   \n",
       "6   experiment  Fri, Oct 17          9088        780        127.0000   \n",
       "7   experiment  Sat, Oct 18          7664        652         94.0000   \n",
       "8   experiment  Sun, Oct 19          8434        697        120.0000   \n",
       "9   experiment  Mon, Oct 20         10496        860        153.0000   \n",
       "10  experiment  Tue, Oct 21         10551        864        143.0000   \n",
       "11  experiment  Wed, Oct 22          9737        801        128.0000   \n",
       "12  experiment  Thu, Oct 23          8176        642        122.0000   \n",
       "13  experiment  Fri, Oct 24          9402        697        194.0000   \n",
       "14  experiment  Sat, Oct 25          8669        669        127.0000   \n",
       "15  experiment  Sun, Oct 26          8881        693        153.0000   \n",
       "16  experiment  Mon, Oct 27          9655        771        213.0000   \n",
       "17  experiment  Tue, Oct 28          9396        736        162.0000   \n",
       "18  experiment  Wed, Oct 29          9262        727        201.0000   \n",
       "19  experiment  Thu, Oct 30          9308        728        207.0000   \n",
       "20  experiment  Fri, Oct 31          8715        722        182.0000   \n",
       "21  experiment   Sat, Nov 1          8448        695        142.0000   \n",
       "22  experiment   Sun, Nov 2          8836        724        182.0000   \n",
       "\n",
       "    payments_ex  gc  nc  \n",
       "0       34.0000   0   0  \n",
       "1       91.0000   0   1  \n",
       "2       79.0000   0   0  \n",
       "3       92.0000   0   0  \n",
       "4       94.0000   0   1  \n",
       "5       61.0000   0   0  \n",
       "6       44.0000   0   0  \n",
       "7       62.0000   0   0  \n",
       "8       77.0000   0   1  \n",
       "9       98.0000   0   1  \n",
       "10      71.0000   0   0  \n",
       "11      70.0000   0   0  \n",
       "12      68.0000   0   1  \n",
       "13      94.0000   0   0  \n",
       "14      81.0000   0   0  \n",
       "15     101.0000   0   0  \n",
       "16     119.0000   0   0  \n",
       "17     120.0000   1   1  \n",
       "18      96.0000   1   1  \n",
       "19      67.0000   1   0  \n",
       "20     123.0000   1   1  \n",
       "21     100.0000   0   1  \n",
       "22     103.0000   0   1  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df = pd.concat([control_df, experiment_df], axis = 1)\n",
    "merged_df['gc'] = np.where(merged_df['enrollments_ex'] > merged_df['enrollments'], 1, 0)\n",
    "merged_df['nc'] = np.where(merged_df['payments_ex'] > merged_df['payments'], 1, 0)\n",
    "merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "gc_success = merged_df['gc'].sum()\n",
    "nc_success = merged_df['nc'].sum()\n",
    "day_count = len(merged_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.0025994777679443364 , Statistically Significant: True\n"
     ]
    }
   ],
   "source": [
    "#gross conversion sign test###\n",
    "p_value = stats.binom_test(gc_success, n = day_count, p=0.5)\n",
    "print(\"p-value:\",p_value,\", Statistically Significant:\",p_value<0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 0.6776394844055175 , Statistically Significant: False\n"
     ]
    }
   ],
   "source": [
    "#net conversion sign test###\n",
    "p_value = stats.binom_test(nc_success, n = day_count, p=0.5)\n",
    "print(\"p-value:\",p_value,\", Statistically Significant:\",p_value<0.05)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The analysis on evaluation metrics  and the sanity check with sign test provided same result that gross conversion is significant and net conversion is not significant.\n",
    "- The observed change in the gross conversion is 2% lower compared to control and since the net conversion also was not significant, we can conclude its a **`NO LAUNCH`**. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bootstrapping Checks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>date</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7723</td>\n",
       "      <td>687</td>\n",
       "      <td>134.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9102</td>\n",
       "      <td>779</td>\n",
       "      <td>147.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10511</td>\n",
       "      <td>909</td>\n",
       "      <td>167.0000</td>\n",
       "      <td>95.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9871</td>\n",
       "      <td>836</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>105.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>10014</td>\n",
       "      <td>837</td>\n",
       "      <td>163.0000</td>\n",
       "      <td>64.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 16</td>\n",
       "      <td>9670</td>\n",
       "      <td>823</td>\n",
       "      <td>138.0000</td>\n",
       "      <td>82.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 17</td>\n",
       "      <td>9008</td>\n",
       "      <td>748</td>\n",
       "      <td>146.0000</td>\n",
       "      <td>76.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 18</td>\n",
       "      <td>7434</td>\n",
       "      <td>632</td>\n",
       "      <td>110.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 19</td>\n",
       "      <td>8459</td>\n",
       "      <td>691</td>\n",
       "      <td>131.0000</td>\n",
       "      <td>60.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 20</td>\n",
       "      <td>10667</td>\n",
       "      <td>861</td>\n",
       "      <td>165.0000</td>\n",
       "      <td>97.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 21</td>\n",
       "      <td>10660</td>\n",
       "      <td>867</td>\n",
       "      <td>196.0000</td>\n",
       "      <td>105.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 22</td>\n",
       "      <td>9947</td>\n",
       "      <td>838</td>\n",
       "      <td>162.0000</td>\n",
       "      <td>92.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 23</td>\n",
       "      <td>8324</td>\n",
       "      <td>665</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>56.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 24</td>\n",
       "      <td>9434</td>\n",
       "      <td>673</td>\n",
       "      <td>220.0000</td>\n",
       "      <td>122.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Oct 25</td>\n",
       "      <td>8687</td>\n",
       "      <td>691</td>\n",
       "      <td>176.0000</td>\n",
       "      <td>128.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Oct 26</td>\n",
       "      <td>8896</td>\n",
       "      <td>708</td>\n",
       "      <td>161.0000</td>\n",
       "      <td>104.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>control</td>\n",
       "      <td>Mon, Oct 27</td>\n",
       "      <td>9535</td>\n",
       "      <td>759</td>\n",
       "      <td>233.0000</td>\n",
       "      <td>124.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>control</td>\n",
       "      <td>Tue, Oct 28</td>\n",
       "      <td>9363</td>\n",
       "      <td>736</td>\n",
       "      <td>154.0000</td>\n",
       "      <td>91.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>control</td>\n",
       "      <td>Wed, Oct 29</td>\n",
       "      <td>9327</td>\n",
       "      <td>739</td>\n",
       "      <td>196.0000</td>\n",
       "      <td>86.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>control</td>\n",
       "      <td>Thu, Oct 30</td>\n",
       "      <td>9345</td>\n",
       "      <td>734</td>\n",
       "      <td>167.0000</td>\n",
       "      <td>75.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>control</td>\n",
       "      <td>Fri, Oct 31</td>\n",
       "      <td>8890</td>\n",
       "      <td>706</td>\n",
       "      <td>174.0000</td>\n",
       "      <td>101.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>control</td>\n",
       "      <td>Sat, Nov 1</td>\n",
       "      <td>8460</td>\n",
       "      <td>681</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>93.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>control</td>\n",
       "      <td>Sun, Nov 2</td>\n",
       "      <td>8836</td>\n",
       "      <td>693</td>\n",
       "      <td>206.0000</td>\n",
       "      <td>67.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 11</td>\n",
       "      <td>7716</td>\n",
       "      <td>686</td>\n",
       "      <td>105.0000</td>\n",
       "      <td>34.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 12</td>\n",
       "      <td>9288</td>\n",
       "      <td>785</td>\n",
       "      <td>116.0000</td>\n",
       "      <td>91.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 13</td>\n",
       "      <td>10480</td>\n",
       "      <td>884</td>\n",
       "      <td>145.0000</td>\n",
       "      <td>79.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 14</td>\n",
       "      <td>9867</td>\n",
       "      <td>827</td>\n",
       "      <td>138.0000</td>\n",
       "      <td>92.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 15</td>\n",
       "      <td>9793</td>\n",
       "      <td>832</td>\n",
       "      <td>140.0000</td>\n",
       "      <td>94.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 16</td>\n",
       "      <td>9500</td>\n",
       "      <td>788</td>\n",
       "      <td>129.0000</td>\n",
       "      <td>61.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>29</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 17</td>\n",
       "      <td>9088</td>\n",
       "      <td>780</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>44.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 18</td>\n",
       "      <td>7664</td>\n",
       "      <td>652</td>\n",
       "      <td>94.0000</td>\n",
       "      <td>62.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 19</td>\n",
       "      <td>8434</td>\n",
       "      <td>697</td>\n",
       "      <td>120.0000</td>\n",
       "      <td>77.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 20</td>\n",
       "      <td>10496</td>\n",
       "      <td>860</td>\n",
       "      <td>153.0000</td>\n",
       "      <td>98.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 21</td>\n",
       "      <td>10551</td>\n",
       "      <td>864</td>\n",
       "      <td>143.0000</td>\n",
       "      <td>71.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 22</td>\n",
       "      <td>9737</td>\n",
       "      <td>801</td>\n",
       "      <td>128.0000</td>\n",
       "      <td>70.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 23</td>\n",
       "      <td>8176</td>\n",
       "      <td>642</td>\n",
       "      <td>122.0000</td>\n",
       "      <td>68.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 24</td>\n",
       "      <td>9402</td>\n",
       "      <td>697</td>\n",
       "      <td>194.0000</td>\n",
       "      <td>94.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Oct 25</td>\n",
       "      <td>8669</td>\n",
       "      <td>669</td>\n",
       "      <td>127.0000</td>\n",
       "      <td>81.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Oct 26</td>\n",
       "      <td>8881</td>\n",
       "      <td>693</td>\n",
       "      <td>153.0000</td>\n",
       "      <td>101.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Mon, Oct 27</td>\n",
       "      <td>9655</td>\n",
       "      <td>771</td>\n",
       "      <td>213.0000</td>\n",
       "      <td>119.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Tue, Oct 28</td>\n",
       "      <td>9396</td>\n",
       "      <td>736</td>\n",
       "      <td>162.0000</td>\n",
       "      <td>120.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>41</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Wed, Oct 29</td>\n",
       "      <td>9262</td>\n",
       "      <td>727</td>\n",
       "      <td>201.0000</td>\n",
       "      <td>96.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>42</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Thu, Oct 30</td>\n",
       "      <td>9308</td>\n",
       "      <td>728</td>\n",
       "      <td>207.0000</td>\n",
       "      <td>67.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>43</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Fri, Oct 31</td>\n",
       "      <td>8715</td>\n",
       "      <td>722</td>\n",
       "      <td>182.0000</td>\n",
       "      <td>123.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sat, Nov 1</td>\n",
       "      <td>8448</td>\n",
       "      <td>695</td>\n",
       "      <td>142.0000</td>\n",
       "      <td>100.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>experiment</td>\n",
       "      <td>Sun, Nov 2</td>\n",
       "      <td>8836</td>\n",
       "      <td>724</td>\n",
       "      <td>182.0000</td>\n",
       "      <td>103.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       variant         date  pageviews  clicks  enrollments  payments\n",
       "0      control  Sat, Oct 11       7723     687     134.0000   70.0000\n",
       "1      control  Sun, Oct 12       9102     779     147.0000   70.0000\n",
       "2      control  Mon, Oct 13      10511     909     167.0000   95.0000\n",
       "3      control  Tue, Oct 14       9871     836     156.0000  105.0000\n",
       "4      control  Wed, Oct 15      10014     837     163.0000   64.0000\n",
       "5      control  Thu, Oct 16       9670     823     138.0000   82.0000\n",
       "6      control  Fri, Oct 17       9008     748     146.0000   76.0000\n",
       "7      control  Sat, Oct 18       7434     632     110.0000   70.0000\n",
       "8      control  Sun, Oct 19       8459     691     131.0000   60.0000\n",
       "9      control  Mon, Oct 20      10667     861     165.0000   97.0000\n",
       "10     control  Tue, Oct 21      10660     867     196.0000  105.0000\n",
       "11     control  Wed, Oct 22       9947     838     162.0000   92.0000\n",
       "12     control  Thu, Oct 23       8324     665     127.0000   56.0000\n",
       "13     control  Fri, Oct 24       9434     673     220.0000  122.0000\n",
       "14     control  Sat, Oct 25       8687     691     176.0000  128.0000\n",
       "15     control  Sun, Oct 26       8896     708     161.0000  104.0000\n",
       "16     control  Mon, Oct 27       9535     759     233.0000  124.0000\n",
       "17     control  Tue, Oct 28       9363     736     154.0000   91.0000\n",
       "18     control  Wed, Oct 29       9327     739     196.0000   86.0000\n",
       "19     control  Thu, Oct 30       9345     734     167.0000   75.0000\n",
       "20     control  Fri, Oct 31       8890     706     174.0000  101.0000\n",
       "21     control   Sat, Nov 1       8460     681     156.0000   93.0000\n",
       "22     control   Sun, Nov 2       8836     693     206.0000   67.0000\n",
       "23  experiment  Sat, Oct 11       7716     686     105.0000   34.0000\n",
       "24  experiment  Sun, Oct 12       9288     785     116.0000   91.0000\n",
       "25  experiment  Mon, Oct 13      10480     884     145.0000   79.0000\n",
       "26  experiment  Tue, Oct 14       9867     827     138.0000   92.0000\n",
       "27  experiment  Wed, Oct 15       9793     832     140.0000   94.0000\n",
       "28  experiment  Thu, Oct 16       9500     788     129.0000   61.0000\n",
       "29  experiment  Fri, Oct 17       9088     780     127.0000   44.0000\n",
       "30  experiment  Sat, Oct 18       7664     652      94.0000   62.0000\n",
       "31  experiment  Sun, Oct 19       8434     697     120.0000   77.0000\n",
       "32  experiment  Mon, Oct 20      10496     860     153.0000   98.0000\n",
       "33  experiment  Tue, Oct 21      10551     864     143.0000   71.0000\n",
       "34  experiment  Wed, Oct 22       9737     801     128.0000   70.0000\n",
       "35  experiment  Thu, Oct 23       8176     642     122.0000   68.0000\n",
       "36  experiment  Fri, Oct 24       9402     697     194.0000   94.0000\n",
       "37  experiment  Sat, Oct 25       8669     669     127.0000   81.0000\n",
       "38  experiment  Sun, Oct 26       8881     693     153.0000  101.0000\n",
       "39  experiment  Mon, Oct 27       9655     771     213.0000  119.0000\n",
       "40  experiment  Tue, Oct 28       9396     736     162.0000  120.0000\n",
       "41  experiment  Wed, Oct 29       9262     727     201.0000   96.0000\n",
       "42  experiment  Thu, Oct 30       9308     728     207.0000   67.0000\n",
       "43  experiment  Fri, Oct 31       8715     722     182.0000  123.0000\n",
       "44  experiment   Sat, Nov 1       8448     695     142.0000  100.0000\n",
       "45  experiment   Sun, Nov 2       8836     724     182.0000  103.0000"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boot_df = (ex_df.dropna()\n",
    "            .reset_index(drop = True))\n",
    "boot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variant</th>\n",
       "      <th>pageviews</th>\n",
       "      <th>clicks</th>\n",
       "      <th>enrollments</th>\n",
       "      <th>payments</th>\n",
       "      <th>gc</th>\n",
       "      <th>nc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>control</td>\n",
       "      <td>212163</td>\n",
       "      <td>17293</td>\n",
       "      <td>3785</td>\n",
       "      <td>2033</td>\n",
       "      <td>0.2189</td>\n",
       "      <td>0.1176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>experiment</td>\n",
       "      <td>211362</td>\n",
       "      <td>17260</td>\n",
       "      <td>3423</td>\n",
       "      <td>1945</td>\n",
       "      <td>0.1983</td>\n",
       "      <td>0.1127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      variant  pageviews  clicks  enrollments  payments     gc     nc\n",
       "0     control     212163   17293         3785      2033 0.2189 0.1176\n",
       "1  experiment     211362   17260         3423      1945 0.1983 0.1127"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "try_df = (eval_df.assign(gc = lambda x: x.enrollments/x.clicks)\n",
    "                 .assign(nc = lambda x: x.payments/x.clicks))\n",
    "try_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "prop_diff_gc = try_df.loc[try_df['variant'] == 'control', 'gc'].reset_index(drop = True) - try_df.loc[try_df['variant'] == 'experiment', 'gc'].reset_index(drop = True)\n",
    "prop_diff_nc = try_df.loc[try_df['variant'] == 'control', 'nc'].reset_index(drop = True) - try_df.loc[try_df['variant'] == 'experiment', 'nc'].reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prop_diff_gc: 0   0.0206\n",
      "Name: gc, dtype: float64\n",
      "prop_diff_nc: 0   0.0049\n",
      "Name: nc, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"prop_diff_gc: {}\".format(prop_diff_gc))\n",
    "print(\"prop_diff_nc: {}\".format(prop_diff_nc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_permutation_samples(df, seed=None, num = None, denom = None):\n",
    "    rng = np.random.RandomState(seed)\n",
    "    sample_df = df.iloc[rng.permutation(df.index)].reset_index(drop = True)\n",
    "    sample1_df = sample_df[:int(len(df)/2)]\n",
    "    sample2_df = sample_df[int(len(df)/2):]\n",
    "    sample_prop1 = sample1_df[num].sum()/sample1_df[denom].sum()\n",
    "    sample_prop2 = sample2_df[num].sum()/sample2_df[denom].sum()\n",
    "    return sample_prop1, sample_prop2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-value 0.0606\n"
     ]
    }
   ],
   "source": [
    "##### empirical significance for gross conversion #####\n",
    "num_permutations = 10000\n",
    "\n",
    "perm_prop_diffs = np.zeros(num_permutations)\n",
    "\n",
    "for i in range(num_permutations):\n",
    "    p1, p2 = generate_permutation_samples(boot_df, seed=i, num = 'enrollments', denom = 'clicks')\n",
    "    perm_prop_diffs[i] = p1 - p2\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(9, 5))\n",
    "ax.hist(perm_prop_diffs,\n",
    "           bins=20,\n",
    "           color = '#003049')\n",
    "ax.axvline(prop_diff_gc.values,\n",
    "           color='#d62828',\n",
    "            linewidth=3.0)\n",
    "plt.title(\"Empirical estimate of observed change for Gross Conversion\", size=14, weight='bold')\n",
    "plt.show()\n",
    "\n",
    "p_value = np.sum(perm_prop_diffs >= prop_diff_gc.values) / len(perm_prop_diffs)\n",
    "print('P-value', p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-value 0.2875\n"
     ]
    }
   ],
   "source": [
    "##### empirical significance for net conversion #####\n",
    "num_permutations = 10000\n",
    "\n",
    "perm_prop_diffs = np.zeros(num_permutations)\n",
    "\n",
    "for i in range(num_permutations):\n",
    "    p1, p2 = generate_permutation_samples(boot_df, seed=i, num = 'payments', denom = 'clicks')\n",
    "    perm_prop_diffs[i] = p1 - p2\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(9, 5))\n",
    "ax.hist(perm_prop_diffs,\n",
    "           bins=20,\n",
    "           color = '#003049')\n",
    "ax.axvline(prop_diff_nc.values,\n",
    "           color='#d62828',\n",
    "            linewidth=3.0)\n",
    "plt.title(\"Empirical estimate of observed change for Net Conversion\", size=14, weight='bold')\n",
    "plt.show()\n",
    "\n",
    "p_value = np.sum(perm_prop_diffs >= prop_diff_nc.values) / len(perm_prop_diffs)\n",
    "print('P-value', p_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusions from Bootstrapping:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The Gross Conversion didn't show significant result(borderline significant at p value 0.06) as we saw with the analytical appoach above.\n",
    "- The Net Conversion has shown an insignificant result same as the analytical result earlier.\n",
    "\n",
    "These slight difference in the result in GC might be happenning because we only had 23 data points per group.\n",
    "\n",
    "Going by the analytical approach, `No Launch`!!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
